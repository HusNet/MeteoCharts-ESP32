#include <Adafruit_BME280.h>
#include <SSD1306.h>

#define LED_BLUE 17
#define SDA 21
#define SCL 22
#define BME280_BUS 0x76
#define SSD1306_BUS 0x3C
#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64
#define OLED_RESET -1


float temp;
float hum;
int hpa;

Adafruit_BME280 bme; // I2C
SSD1306 screen(SSD1306_BUS, SDA, SCL);

const unsigned char PROGMEM error[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x40, 0x01, 
  0xF0, 0x00, 0xE0, 0x01, 0xE0, 0x01, 0xF0, 0x00, 0xC0, 0x03, 0x78, 0x00, 
  0x80, 0x07, 0x78, 0x00, 0x80, 0x07, 0x3C, 0x00, 0x00, 0x0F, 0x1E, 0x00, 
  0x00, 0x1E, 0x0F, 0x00, 0x00, 0x3E, 0x0F, 0x00, 0x00, 0xFC, 0x07, 0x00, 
  0x00, 0xF8, 0x03, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 
  0x00, 0xF8, 0x01, 0x00, 0x00, 0xFC, 0x03, 0x00, 0x00, 0xBC, 0x07, 0x00, 
  0x00, 0x1E, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x80, 0x0F, 0x1E, 0x00, 
  0x80, 0x07, 0x3C, 0x00, 0xC0, 0x03, 0x78, 0x00, 0xE0, 0x01, 0x78, 0x00, 
  0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xE0, 0x01, 0x78, 0x00, 0xE0, 0x03, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char PROGMEM loading_1[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x40, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x10, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char PROGMEM loading_2[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
  0x40, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x10, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char PROGMEM loading_3[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x78, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 
  0xC0, 0x03, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
  0x70, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
  0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x80, 0x01, 0x20, 0x00, 
  0x00, 0x07, 0x04, 0x00, 0x00, 0x44, 0x04, 0x00, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char PROGMEM loading[] = {
// 'loading', 30x30px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xF8, 0x03, 0x00, 0x00, 0xFE, 0x0F, 0x00, 0x00, 0x8F, 0x3E, 0x00, 
  0xC0, 0x03, 0x78, 0x00, 0xE0, 0x00, 0xF0, 0x00, 0x70, 0x00, 0xC0, 0x00, 
  0x30, 0x00, 0x80, 0x00, 0x30, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
  0x40, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x10, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

void setup() {
  
  pinMode(LED_BLUE, OUTPUT);
  ledTrigger(LED_BLUE, false);
  
  Serial.begin(115200);
  while(!Serial);    // time to get serial running
  Serial.println("Ready...");

  if (!bme.begin(BME280_BUS)) {
    Serial.println("Could not find a valid BMP280 sensor, check wiring!");
    ledTrigger(LED_BLUE, true);
  }
  else {
    Serial.println("BMP280 connected!");
  }

  screen.init();

  screen.flipScreenVertically();
  screen.setFont(ArialMT_Plain_16);

}

void loop() {

  drawLoading();

  bool bmp_success = getMeteoChartsData();

  delay(500);

  if(bmp_success) {
    ledTrigger(LED_BLUE, false);
    
    screen.clear();
    char str [80];
    sprintf(str, "%.1f C°", temp);
    screen.drawString(0,0, str);
    sprintf(str, "%.1f %%", hum);
    screen.drawString(0,20, str);
    sprintf(str, "%d hPa", hpa);
    screen.drawString(0,40, str);
    screen.display();
  }
  else {
    ledTrigger(LED_BLUE, true);
    screen.drawXbm(screen.getWidth()-37, 5, 30, 30, error);
    screen.display();
  }

  esp_deep_sleep(60e6);
}

void drawLoading(){
  screen.drawXbm(screen.getWidth()-37, 5, 30, 30, loading_1);
  screen.display();
  delay(250);
  screen.drawXbm(screen.getWidth()-37, 5, 30, 30, loading_2);
  screen.display();
  delay(250);
  screen.drawXbm(screen.getWidth()-37, 5, 30, 30, loading_3);
  screen.display();
  delay(250);
  screen.drawXbm(screen.getWidth()-37, 5, 30, 30, loading);
  screen.display();
}

bool getMeteoChartsData() {
  
  temp = bme.readTemperature();
  hum = bme.readHumidity();
  hpa = bme.readPressure()/100;
 
  if (isnan(hum) || isnan(temp) || isnan(hpa)) {
      Serial.println("Failed to read data from sensor!");
      return false;
  }
  Serial.print(temp);
  Serial.print("°C");
  Serial.print(" - ");
  Serial.print(hum);
  Serial.print("%");
  Serial.print(" - ");
  Serial.print(hpa);
  Serial.println(" hPa");

  return true;
}

void ledTrigger(int color, bool on){
  if (on)
    digitalWrite(color, LOW);
  else
    digitalWrite(color, HIGH);
}